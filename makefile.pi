ifeq ($(TARGET),)
TARGET = mame
# TARGET = neomame
endif

# set this the operating system you're building for
# (actually you'll probably need your own main makefile anyways)
# MAMEOS = msdos
MAMEOS = odx

# extension for executables
# EXE = .exe
EXE =

# CPU core include paths
VPATH=src $(wildcard src/cpu/*)

# compiler, linker and utilities
CC = @gcc
CPP = @g++
LD = @g++
MD = @mkdir
RM = @rm -f
CP = @cp

SDLHOME=/media/pi/PiSpace/src/cubie/ct-sdl2
# SDLHOME=/media/pi/PiSpace/src/SDL2.0

DEVLIBS = -L$(SDLHOME)/build/.libs -L/usr/lib/arm-linux-gnueabihf

EMULATOR = $(TARGET)$(EXE)

DISTRIB_EMULATOR = distrib/mame4all/$(EMULATOR)

DEFS =  -DLSB_FIRST -DALIGN_INTS -DALIGN_SHORTS -DINLINE="static __inline" -Dasm="__asm__ __volatile__" -DMMUHACK -DMAME_UNDERCLOCK -DMAME_FASTSOUND -DENABLE_AUTOFIRE -DBIGCASE
# -DMAME_MEMINLINE

CFLAGS = -fsigned-char $(DEVLIBS) \
	-mcpu=cortex-a53 -mfpu=neon-fp-armv8 -mfloat-abi=hard \
	-I$(SDLHOME)/include \
	-Isrc -Isrc/$(MAMEOS) -Isrc/zlib \
	-I/opt/vc/include \
	-I/opt/vc/include/interface/vcos/pthreads \
	-I/opt/vc/include/interface/vmcs_host/linux \
	-O3 -fomit-frame-pointer -fstrict-aliasing \
	-mstructure-size-boundary=32 -fexpensive-optimizations \
	-fpermissive \
	-fweb -frename-registers -falign-functions=16 -falign-loops -falign-labels -falign-jumps \
	-finline -finline-functions -fno-common -fno-builtin -fsingle-precision-constant \
	-Wall -Wno-sign-compare -Wunused -Wpointer-arith -Wcast-align -Waggregate-return -Wshadow

LDFLAGS = $(CFLAGS) -s 

LIBS = -lSDL2 -lm -lpthread -lX11 -lasound -L/opt/vc/lib -lbcm_host
# -lSDL2

OBJ = obj_$(TARGET)_$(MAMEOS)

OBJDIRS = $(OBJ) $(OBJ)/cpu $(OBJ)/sound $(OBJ)/$(MAMEOS) \
	$(OBJ)/drivers $(OBJ)/machine $(OBJ)/vidhrdw $(OBJ)/sndhrdw \
	$(OBJ)/zlib

all:	maketree $(DISTRIB_EMULATOR) $(DISTRIB_EMULATOR).dge

# include the various .mak files
include src/core.mak
include src/$(TARGET).mak
include src/rules.mak
include src/sound.mak
include src/$(MAMEOS)/$(MAMEOS).mak

# combine the various definitions to one
CDEFS = $(DEFS) $(COREDEFS) $(CPUDEFS) $(SOUNDDEFS)

$(EMULATOR): $(COREOBJS) $(OSOBJS) $(DRVOBJS)
	@echo Linking $@ ...
	$(LD) $(LDFLAGS) $(COREOBJS) $(OSOBJS) $(LIBS) $(DRVOBJS) -o $@
	
$(DISTRIB_EMULATOR) : $(EMULATOR)	
	$(CP) $(EMULATOR) distrib/mame4all/$(EMULATOR)
	
$(DISTRIB_EMULATOR).dge : $(EMULATOR).dge	
	$(CP) $(EMULATOR).dge distrib/mame4all/$(EMULATOR).dge
	
$(EMULATOR).dge: $(FEOBJS)
	@echo Linking $@ ...
	$(LD) $(LDFLAGS) $(FEOBJS) $(LIBS) -o $@

$(OBJ)/%.o: src/%.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGS) -c $< -o $@

$(OBJ)/%.o: src/%.cpp
	@echo Compiling $<...
	$(CPP) $(CDEFS) $(CFLAGS) -fno-rtti -c $< -o $@

$(OBJ)/%.o: src/%.s
	@echo Compiling $<...
	$(CPP) $(CDEFS) $(CFLAGS) -c $< -o $@

$(OBJ)/%.o: src/%.S
	@echo Compiling $<...
	$(CPP) $(CDEFS) $(CFLAGS) -c $< -o $@

$(sort $(OBJDIRS)):
	$(MD) $@

maketree: $(sort $(OBJDIRS))

clean:
	$(RM) -r $(OBJ)
	$(RM) $(EMULATOR)
